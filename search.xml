<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Day01 OpenStack入门介绍</title>
      <link href="/2019/10/09/Day01-OpenStack%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/10/09/Day01-OpenStack%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[  Day01 OpenStack入门介绍：   <excerpt in index | 首页摘要><p>本章介绍了什么是OpenStack，及OpenStack云操作系统的组件，以及各组件的交互，达到初级的入门，以快速了解openstack这一开源的云操作系统。</p><a id="more"></a><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="1-介绍OpenStack"><a href="#1-介绍OpenStack" class="headerlink" title="1  介绍OpenStack"></a>1  介绍OpenStack</h3><p>一二十年前，很多大型的计算机硬件公司都通过自己生产制造专门的处理器来保持竞争优势。但随着成本的上升，能制造出足够数量的芯片来保持盈利的公司越来越少。于是，专门生产芯片的厂商出现了，它们可以大规模生产通用处理器，并且大大降低了成本。从一开始的只有少数计算机芯片厂商“鼓吹”的基于英特尔x86 指令集的标准化台式机和服务器平台，到最后形成了采用通用硬件的客户-服务器的市场格局。 </p><p>在 21 世纪初的互联网风潮下，互联网快速发展，从而出现了大量大规模使用通用硬件的数据中心。虽然通用硬件设备强大且便宜，但它的架构就跟我们看到的台式机一样，不是按中心化管理的思想来设计的。没有现成的工具可以用来像管理资源池一样管理这些通用硬件设备。更糟糕的是，在那时，这些服务器缺少硬件管理的能力（辅助管理卡），看起来跟台式机一样。不像大型机和大型对称多处理结构（symmetric multiprocessing，SMP）的机器，这些通用服务器跟台式机一样，需要通过软件管理层来协调其他独立的资源。</p><p>在这个阶段，公共或者私有的组织在自己内部开发出很多管理框架来管理公共资源。图1-1展示了跨越多个数据中心的相互连接的资源池。通过管理框架，这些公共资源可以基于其可用性或者用户需求来灵活使用。不知道谁创造了这个术语，这种通过管理框架来灵活使用通用硬件设备的计算方式，可以说是拥有了资源“云”。</p> <div align="center"><img src="/2019/10/09/Day01-OpenStack入门介绍/彼此互联的通用资源的云.jpg" style="zoom: 67%;"></div><p>在此阶段，有许多个商用或者云管理软件，OpenStack是最为流行的一个。OpenStack提供了一个通用的平台来控制云计算里面的服务器（计算）、存储、网络，甚至应用资源。OpenStack可以通过基于Web的界面、命令行工具（CLI）和应用程序接口（API）来进行管理。这个管理平台不仅可以管理这些资源，更方便的是，它不需要你去选择特定的硬件或软件厂商。厂商的特定组件可以轻松地被替换成通用的组件，OpenStack为IT业界各类从业人员创造了价值。</p><h3 id="1-1-OpenStack是什么"><a href="#1-1-OpenStack是什么" class="headerlink" title="1.1  OpenStack是什么"></a>1.1  OpenStack是什么</h3><p>那么OpenStack到底是什么呢？OpenStack 官方网站这样描述这个框架：“创建私有云和公有云的开源软件。”接着是：“OpenStack软件是一个大规模云操作系统。”如果读者有服务器虚拟化的经验，也许读者会很快地得出这样不正确的结论：OpenStack 只是提供虚拟机的另外一种方式。虽然虚拟机是OpenStack 框架可以提供的一种服务，但这并不意味着虚拟机是OpenStack 的全部。</p><p>图 1-2 展示了OpenStack 通过其几个资源组件协调来提供公有云服务和私有云服务。如图所示，OpenStack 没有取代资源提供者，它只是通过框架内部的控制点来简单地管理这些资源。</p><p>一个有经验的系统管理员也许会非常怀疑OpenStack 是一个“云操作系统”的描述。OpenStack不像管理员通过启动盘引导启动几百台传统操作系统服务器那样，直接在裸设备上引导启动。相反，它通过对资源的管理，在云计算环境里共享操作系统的特性。</p> <div align="center"><img src="/2019/10/09/Day01-OpenStack入门介绍/openstack是一个云操作系统.jpg" style="zoom:67%;"></div><p>在OpenStack云平台上用户可以：</p><ul><li>充分利用物理服务器、虚拟服务器、网络和存储系统资源；</li><li>通过租户、配额和用户角色高效管理云资源；</li><li>提供一个对底层实现透明的通用资源控制接口。</li></ul><p>乍看之下，OpenStack 确实不像是一个传统操作系统，但“云”同样不像传统计算机。我们必须回过头来重新考虑一个操作系统的根本作用。</p><p>最初，操作系统乃至硬件层面抽象语言（汇编语言）、程序都是用二进制机器码来编写的。然后传统操作系统出现了，允许用户不仅可以编写应用程序代码，还可以管理硬件功能。现在管理员可以使用通用的接口管理硬件实例，开发者可以为通用操作系统写代码，用户只需要学习一个用户交互接口即可。这样可有效地对底层硬件透明化，只需要操作系统是一样的。在计算机进化演变过程中，操作系统的发展和新操作系统的出现，给系统工程和管理领域带来了风险。</p><p>图1-3 展示了现代计算系统的各个抽象的层次。</p> <div align="center"><img src="/2019/10/09/Day01-OpenStack入门介绍/计算抽象的层次.jpg" style="zoom: 80%;"></div><p>毫无疑问，过去的一些开发者不想因为使用操作系统而失去了对硬件的直接控制，正如有些管理员不想因为服务器虚拟化而失去对底层硬件和操作系统的控制。在每次转变过程中，从机器码到汇编，再到虚拟层，我们一直没有失去对底层的控制；每次都是通过抽象手段简单标准化而已。我们仍然拥有高度优化的硬件，我们仍然拥有操作系统，只不过更常见的是我们拥有这些层面之间的硬件虚拟化层。</p><p>新的抽象层被广泛接受，通常是因为对标准实现优化的好处大于在这些层面上做（虚拟化）转换。也就是说，当整体计算资源的使用率能通过牺牲原生性能来得到很好的提升，那这一个层面的抽象就会被接受。这个现象可以通过中央处理器（CPU）的例子来清晰展现，这几十年，中央处理器都遵守相同的指令集，但它们内部的架构却发生了翻天覆地的变化。</p><p>大多数人想到中央处理器时，都没想到硬件层面的虚拟化和执行形式的变化，但事实就是这样。很多在x86 处理器上执行的指令可以被处理器内部虚拟化，一些复杂的指令可以通过一系列更简单、更快速的指令来执行。即使是使用裸设备，即使是在处理器层面，也是应用到了某种形式的虚拟化。现在，与其关注失去了控制，不如想象一下，通过使用一个共同的框架来管理、监控和部署基础设施和应用的私有和公有云。只有向前迈出转变的步伐，才会真正领会OpenStack。</p><h3 id="1-2-关联OpenStack及其控制的计算资源"><a href="#1-2-关联OpenStack及其控制的计算资源" class="headerlink" title="1.2  关联OpenStack及其控制的计算资源"></a>1.2  关联OpenStack及其控制的计算资源</h3><p>前面介绍了大段OpenStack是什么，那么它是如何工作的呢？也许，理解OpenStack是怎样工作的最简单的方式是把这个框架与企业环境内的常见技术关联起来。</p><p>在本小节中，你将会了解OpenStack是如何与它控制的基础资源（计算、存储、网络等）关联起来的。如你所见，OpenStack通常不提供实际意义上的资源，它只是简单控制这些低层次的资源。图1-4 展示了OpenStack 是如何管理资源的提供者的，它们轮流被虚拟机使用。</p> <div align="center"><img src="/2019/10/09/Day01-OpenStack入门介绍/openstack资源管理模型.jpg" style="zoom:80%;"></div><h4 id="1-2-1-OpenStack-和-hypervisor"><a href="#1-2-1-OpenStack-和-hypervisor" class="headerlink" title="1.2.1  OpenStack 和 hypervisor"></a>1.2.1  OpenStack 和 hypervisor</h4><p>hypervisor 或者虚拟机监控器（Virtual Machine Monitor，VMM）是一种为虚拟机进行物理硬件仿真的管理软件。OpenStack 不是一个hypervisor，但它确实控制着hypervisor 的操作。OpenStack框架支持多种hypervisor，包括XenServer/XCP、KVM、QEMU、LXC、ESXi、Hyper-V、BareMetal和其他可通过下列<a href="https://wiki.openstack.org/wiki/HypervisorSupportMatrix" target="_blank" rel="noopener">网址</a>查看hypervisor 的支持列表。读者可能对VMware ESX、VMware ESXi 和Microsoft Hyper-V 比较熟悉，因为这些是当前企业虚拟化市场主流的hypervisor。因为许可限制、成本和其他因素，OpenStack 社区对这些商业hypervisor 的支持要少于开源的hypervisor。</p><p>图 1-5 展示了OpenStack 如何管理物理硬件上被hypervisor 虚拟化的资源。在一个OpenStack集群内，OpenStack 协调多个hypervisor 资源和虚拟机的管理。</p> <div align="center"><img src="/2019/10/09/Day01-OpenStack入门介绍/openstack管理着hypervisor.jpg"></div><p>无论部署规模多大，大多数的个人和组织采用的hypervisor 是XenServer 或者KVM，它们也是支持最多功能的hypervisor。XenServer 是思杰（Citrix）公司的产品，从严格意义上来说，它是开源的hypervisor，但商业支持通过思杰公司提供。KVM 已经是Linux 内核的一部分，因此，很多Linux 发行版的维护者提供KVM 的商业支持，包括红帽（Red Hat）、Ubuntu、SUSE 等。</p><h4 id="1-2-2-OpenStack和网络服务"><a href="#1-2-2-OpenStack和网络服务" class="headerlink" title="1.2.2  OpenStack和网络服务"></a>1.2.2  OpenStack和网络服务</h4><p>OpenStack 不是一个虚拟交换机，但它确实管理多个物理、虚拟的网络设备和虚拟覆盖网络（overlaynetwork）。不像OpenStack 控制虚拟机控制器那样受限于hypervisor 提供的服务，OpenStack 直接提供网络服务，如DHCP、路由等。但与hypervisor 管理类似，OpenStack 对底层厂商技术透明，可以是商业或者开源的技术。</p><p>更重要的是，后端技术的改变，如从一种网络/厂商切换到另一种网络/厂商，并不需要客户端配置进行改动。对于涉及网络的大量专有的硬件、软件和用户接口，经常从一个厂商或者技术转换到另一个并非易事。通过OpenStack，这些接口都被OpenStackAPI 抽象化了，如图1-6 所示。OpenStack 可以管理多种类型的网络技术（实现机制），包括由Arista Networks、Cisco Nexus、Linuxbridging 和Open vSwitch（OVS）等提供的技术。</p> <div align="center"><img src="/2019/10/09/Day01-OpenStack入门介绍/openstack管理网络.jpg" style="zoom:80%;"></div><p>我们将使用OpenStack 和OVS 提供的网络服务。OVS 是OpenStack 部署中常被选择的<br>一种，用户可以简单地在自己的环境里获得和复制，不需要特定硬件环境。除了网络实现机制，还有很多被OpenStack 支持的网络类型（VLAN 和各种隧道技术等），</p><h4 id="1-2-3-OpenStack-和存储"><a href="#1-2-3-OpenStack-和存储" class="headerlink" title="1.2.3  OpenStack 和存储"></a>1.2.3  OpenStack 和存储</h4><p>OpenStack 不是一个存储阵列，至少应该不是你通常认为的存储那种形式。OpenStack 没有从物理上提供被虚拟机使用的存储。</p><p>如果你曾经使用过文件共享（NFS 和CIFS 等），就会用过“基于文件”的存储。这种存储的类型很容易被人使用和被计算机访问，但它通常是另外一种存储类型的抽象：块存储。你可以<br>认为操作系统或者文件系统是块存储的主要用户。</p><p>还有另外一种系统管理员可能不熟悉的存储类型：基于对象的存储。这种类型的存储通常是通过软件API（如GET /obj=xxx）接口进行访问。基于对象的存储是文件或块存储的更高层面的抽象，但没有后两者的限制。基于对象的存储可以很容易地在多个参与节点之间进行分布和复制。不像块存储那样需要被虚拟机快速访问，分布式的对象存储允许更大的延迟，将不能用作虚拟机的卷（volume，挂载到一个实例上的块设备）。通常做法是在创建时就指明使用对象存储来存放卷和镜像（包含操作系统）的备份。</p><p>下面首先介绍OpenStack 是如何管理块存储的，然后介绍对象存储的相关内容。</p><p>1．块存储</p><p>OpenStack 现在没有为最终用户管理基于文件的存储。由下图可以看出，OpenStack 管理块（虚拟机）存储与管理hypervisor 和网络类似。</p><p>下图从基础虚拟机资源管理展望的角度展示了其全貌。OpenStack 可以管理很多厂商提供的存储解决方案，包括来自Ceph、戴尔（Dell）、EMC、惠普（HP）、IBM 和NetApp 等厂商的方案。与hypervisor 和网络组件一样，OpenStack 提供灵活切换存储厂商和技术的能力，并且不需要改变客户端的配置。</p> <div align="center"><img src="/2019/10/09/Day01-OpenStack入门介绍/openstack管理块存储.jpg" style="zoom:80%;"></div><p>2．对象存储</p><p>虽然 OpenStack 不是一个用于块存储（用来启动虚拟机）的存储阵列，但它天生拥有提供对象存储的能力。与在物理硬件上运行Linux 的支持版本不同，OpenStack 提供分布式对象存储集群时并不需要其他软件。这种存储类型可以用来存放卷备份，也通常用来存放大量可以被分割成二进制对象的数据。下图展示了一个基本的对象服务器部署，当然这些都包含在OpenStack 环境中。</p><p>对象存储不是必须在同一地点。事实上，节点（代理节点和存储节点）可以在多个不同的地点，互为冗余。</p> <div align="center"><img src="/2019/10/09/Day01-OpenStack入门介绍/openstack提供基于对象的存储.jpg" style="zoom:80%;"></div><p>对象存储传统的用法是存储那些被应用访问的数据，如被用户的应用程序使用的一个文档或文件。在OpenStack 环境中，对象存储有几种用法。例如，使用对象存储作为虚拟机镜像的仓库。这样并不是说虚拟机直接使用了这些存储，它们只是通过这个存储系统维护的数据被提供出来。这样做是合理的，因为这个提供过程不需要对随机数据的低延时访问。对象存储还会用来备份一个现有的虚拟机的快照，用于长期保存备份。</p><h2 id="二、组件"><a href="#二、组件" class="headerlink" title="二、组件"></a>二、组件</h2><h3 id="2-1-OpenStack-组件介绍"><a href="#2-1-OpenStack-组件介绍" class="headerlink" title="2.1  OpenStack 组件介绍"></a>2.1  OpenStack 组件介绍</h3><p>前面我们介绍了OpenStack 基本的功能，本节我们将会分析组成OpenStack 框架的基本组件。下图列举了多个OpenStack 组件或核心项目。虽然还有更多现处在不同开发阶段的项目，<br>但下图中所列的是OpenStack 的基本组件。最新的OpenStack 服务路线图可以在OpenStack 路线图网页（<a href="http://www.openstack.org/software/roadmap/）中找到。" target="_blank" rel="noopener">www.openstack.org/software/roadmap/）中找到。</a></p><br> <div align="center"><img src="/2019/10/09/Day01-OpenStack入门介绍/openstack组件介绍.jpg" style="zoom:80%;"></div><br><p>上图所示的是OpenStack的核心组件，为必须品，其余的组件可依照自己的需求选加。OpenStack的简介到这里就完了，接下来将会实战进行一次OpenStack的手动搭建，以便掌握OpenStack的部署步骤。</p><p>在此感谢参考书籍《OpenStack实战,V.K.Cody Bumgardner》，文中图片大部分来源此书，感谢原作者！！！</p></excerpt>]]></content>
      
      
      <categories>
          
          <category> openstack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入门，介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash的基本特性</title>
      <link href="/2019/09/23/day01--bash%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7/"/>
      <url>/2019/09/23/day01--bash%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[  bash的基本特性：   <excerpt in index | 首页摘要><p>本文介绍并说明了Linux中bash的基本特性，是linux shell脚本编程的基础</p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Bash (GNU Bourne-Again Shell) 是许多Linux发行版的默认Shell 。事实上，还有许多传统UNIX上用的Shell，例如tcsh、csh、ash、bsh、ksh等等，Shell Script大致都类同，当您学会一种Shell以后，其它的Shell会很快就上手，大多数的时候，一个Shell Script通常可以在很多种Shell上使用。</p><p>  bash是大多数<a href="https://baike.baidu.com/item/Linux" target="_blank" rel="noopener">Linux</a>系统以及[Mac OS X](<a href="https://baike.baidu.com/item/Mac" target="_blank" rel="noopener">https://baike.baidu.com/item/Mac</a> OS X)默认的shell，它能运行于大多数类Unix风格的操作系统之上，甚至被移植到了Microsoft Windows上的Cygwin系统中，以实现Windows的<a href="https://baike.baidu.com/item/POSIX" target="_blank" rel="noopener">POSIX</a>虚拟接口。此外，它也被DJGPP项目移植到了MS-DOS上。</p><p>bash的命令语法是Bourne shell命令语法的超集。数量庞大的Bourne shell脚本大多不经修改即可以在bash中执行，只有使用了Bourne的特殊变量或内置命令的脚本才需要修改。 bash的命令语法很多来自Korn shell (ksh) 和 C shell (csh)， 例如命令行编辑，命令历史，目录栈，$RANDOM 和 $PPID 变量，以及POSIX的命令置换语法： $(…)。作为一个交互式的shell，按下TAB键即可自动补全已部分输入的程序名、文件名、变量名等等。</p><h2 id="命令——历史（history）"><a href="#命令——历史（history）" class="headerlink" title="命令——历史（history）"></a>命令——历史（history）</h2><h3 id="作用：查看之前使用的命令"><a href="#作用：查看之前使用的命令" class="headerlink" title="作用：查看之前使用的命令"></a>作用：查看之前使用的命令</h3><p>关于历史命令的文件：在每个用户家目录下的 .bash_history中</p> <div align="center"><img src="/2019/09/23/day01--bash的基本特性/history.jpg" style="zoom:50%;"><p>在关机时，会自动写入一次历史命令，同时还有种手动写入文件的命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">history</span> -a</span><br></pre></td></tr></table></figure><p>输入后，可去历史文件中查看验证</p><p>关于history命令的变量（环境变量）</p><p>env     //查看环境变量</p><img src="/2019/09/23/day01--bash的基本特性/env.jpg" style="zoom:50%;"><p>set     //查看更详细的环境变量参数</p><p>HISTSIZE=1000    数量</p><p>HISTCONTROL=ignoredups<br>                Ignoredups  忽略重复的历史命令  –  连续且相同，才叫重复<br>                Ignorespace  忽略空白开头的历史命令，“键入空格开头则不会被记录”<br>                Ignoreboth  两者都生效<br>        HISTFILE=/root/.bash_history<br>        HISTFILESIZE=1000</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>​            ！#                #表示数值，执行#行的命令</p><p>​            <img src="/2019/09/23/day01--bash的基本特性/%EF%BC%812.jpg" alt></p><p>​            ！string        匹配最近一次的字符串</p><p>​            <img src="/2019/09/23/day01--bash的基本特性/!ls.jpg" style="zoom:50%;"></p><p>​            ！！            执行上一条命令</p><p>​            <img src="/2019/09/23/day01--bash的基本特性/！！.jpg" style="zoom:50%;"></p><p>​            * !$ *                上一条命令的最后一个参数</p><p>​            <img src="/2019/09/23/day01--bash的基本特性/%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0..jpg" alt></p><h3 id="history的常见操作"><a href="#history的常见操作" class="headerlink" title="history的常见操作"></a>history的常见操作</h3><p>​            查看命令历史</p><p>​            <img src="/2019/09/23/day01--bash的基本特性/history01.jpg" style="zoom:50%;"></p><p>​            常见的选项：</p><p>​            -a        #将当前的记录信息，添加到 /root/.bash_history中</p><p>​            <img src="/2019/09/23/day01--bash的基本特性/history-a.jpg" alt></p><p>​            -d         #删除指定行</p><p>​            删除前：</p><p>​            <img src="/2019/09/23/day01--bash的基本特性/history-d.jpg" style="zoom:80%;"></p><p>​            删除第6行后：</p><p>​            <img src="/2019/09/23/day01--bash的基本特性/history-d1.jpg" style="zoom:80%;"></p><p>​            -c        #清除所有记录</p><p>​            <img src="/2019/09/23/day01--bash的基本特性/history-c.jpg"></p><p>​            -# (数字)        显示最近#行的命令</p><p>​            ![](day01–bash的基本特性/history #.jpg)</p></div></excerpt>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo+Github搭建属于自己的博客</title>
      <link href="/2019/09/19/%E5%9F%BA%E4%BA%8EHexo-Github%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/09/19/%E5%9F%BA%E4%BA%8EHexo-Github%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[  基于Hexo+Github搭建属于自己的博客：   <excerpt in index | 首页摘要><p>本文介绍了如何使用Hexo + github搭建一个属于自己的博客平台·，简易上手，操作简单。</p><a id="more"></a><h2 id="Hexo-Github-搭建属于自己的个性化博客"><a href="#Hexo-Github-搭建属于自己的个性化博客" class="headerlink" title="Hexo + Github 搭建属于自己的个性化博客"></a>Hexo + Github 搭建属于自己的个性化博客</h2><p>一直想写自己的博客，但又不想使用CSDN或者博客园之类的拿来即用的博客网站，思来想去还是想搭建出一个适合自己风格，稍有些技术向的博客。查阅了好些的文章，找到了“T9的第三个三角”大佬的<a href="https://blog.csdn.net/dazhaoDai/article/details/73730069" target="_blank" rel="noopener">如何从零开始搭建自己的博客（通俗易懂）</a>这篇文章，从而开始了自己的博客之旅，感谢文章作者！！！</p><h3 id="话不多说，现在就开始搭建属于自己的博客"><a href="#话不多说，现在就开始搭建属于自己的博客" class="headerlink" title="话不多说，现在就开始搭建属于自己的博客"></a>话不多说，现在就开始搭建属于自己的博客</h3><p>首先介绍下我本身的搭建环境：</p><p>系统：windows 10</p><p>软件：</p><p>​            git ：一款免费、开源的分布式版本控制系统</p><p>​            node.js：建立在Chrome上的JavaScript运行引擎</p><p>平台：</p><p>​            Hexo ：一款快速、简洁且高效的博客框架</p><p>​            Github：一款面向开发者的云端开发平台，提供代码托管，运行空间，质量控制，项目管理等功能</p><p>所需的软件就是以上这些，不是太难寻找，为了提升各位大佬搭建博客的速度，附上各官网下载链接<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">node.js官方中文下载网站</a>、<a href="https://git-scm.com/" target="_blank" rel="noopener">git官方网站</a>。</p><h3 id="首先我们需要下载软件，搭建环境。"><a href="#首先我们需要下载软件，搭建环境。" class="headerlink" title="首先我们需要下载软件，搭建环境。"></a>首先我们需要下载软件，搭建环境。</h3><p>进入node.js中文官方界面，因为是中文网站，直接点击下载界面，选择相应的版本下载，安装时只有安装位置可自行选择更改，其余默认即可。</p> <div align="center"><img src="/2019/09/19/基于Hexo-Github搭建属于自己的博客/node.js.png"></div><p>进入git官网，点击Downloades选择适合自己的版本开始下载，安装步骤大同小异，无太大区别。</p> <div align="center"><img src="/2019/09/19/基于Hexo-Github搭建属于自己的博客/git.png"></div><p>软件安装好后，我们需要去github，如果已经有的话直接登录就可以，如果没有的话，输入用户名、邮箱、和密码注册一个属于自己的github账号</p> <div align="center"><img src="/2019/09/19/基于Hexo-Github搭建属于自己的博客/github.png" style="zoom: 50%;"></div><p>登录成功后，点击右上方头像旁边的下三角，点击Your repositories进入自己的仓库</p> <div align="center"><img src="/2019/09/19/基于Hexo-Github搭建属于自己的博客/cangku.png" style="zoom:150%;"><p>点击New新建仓库，会弹出如下界面仓库名字输入自己的用户名+github+io，例如我的用户名是Draculaspider，那么我新建的仓库名就是Draculaspider.github.io，下方选择Pubblic，并且点击Create repository完成仓库创建，这个仓库名就是以后访问博客的域名</p> <div align="center"><img src="/2019/09/19/基于Hexo-Github搭建属于自己的博客/repositories.png" style="zoom: 50%;"></div><p>创建成功后，进入新仓库，找到Settings选项，下拉在GitHub Pages中选择一个主题，之后一个托管在github上的博客就搞定了，大概过一会后，例如我的个人博客：<a href="http://draculaspider.github.io">http://draculaspider.github.io</a>  就可以访问了，注意，将其中的用户名换成你创建的仓库名，这时候你就可以访问自己的博客了</p> <div align="center"><img src="/2019/09/19/基于Hexo-Github搭建属于自己的博客/setzhuti.png" style="zoom: 80%;"></div><p>这个时候，看着官方自带的博客主题是不有些难受呢，觉得这不是我想要的博客，太难看了</p><p>别着急，接下来我们来配置自己个性化的博客</p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>前面我们已经安装了Git、Node.js，然后使用npm，安装hexo:</p><p>打开git-bash</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完毕，我们就需要对自己的仓库进行配置了，首先使用Git，将自己的仓库克隆到本地</p><h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h3><p>复制仓库地址，在本地创建一个个人博客的文件夹，例如GitHub_Blog，进入文件夹，使用git命令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:Draculaspider/Draculaspider.github.io.git</span><br></pre></td></tr></table></figure><h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;替换为当前博客文件夹，例如我的是/e/GitHub_Blog/Draculaspider.github.io/android_Dra &gt;</span><br><span class="line">$ cd /e/GitHub_Blog/Draculaspider.github.io/android_Dra</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls -D</span><br><span class="line">_config.yml  node_modules/  package-lock.json  scaffolds/  themes/</span><br><span class="line">db.json      package.json   public/            source/</span><br></pre></td></tr></table></figure><p>我们大部分的操作都在_config.yml中，打开_config.yml，查看信息：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: 小白的个人博客#你博客的标题</span><br><span class="line">subtitle: 工作，生活，缺一不可#显示在浏览器上搜索的时候显示的标题</span><br><span class="line">description: 喜欢未知的生活#描述</span><br><span class="line">author: LH#显示作者</span><br><span class="line">email: 821859204@qq.com#邮箱</span><br><span class="line">language: zh-Hans#语言</span><br><span class="line">timezone: Asia/Beijing#时区</span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://Draculaspider.github.io     #填写你的博客地址</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: false</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line">index_generator:</span><br><span class="line">  path: ''</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: black-blue</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/Draculaspider/Draculaspider.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>我们要修改的就是有注释的地方</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: 小白的个人博客 #你博客的标题</span><br><span class="line">subtitle: 工作，生活，缺一不可   #显示在浏览器上搜索的时候显示的标题</span><br><span class="line">description: 喜欢未知的生活 #描述</span><br><span class="line">author: LH #显示作者</span><br><span class="line">email: 821859204@qq.com  #邮箱</span><br><span class="line">language: zh-Hans #语言</span><br><span class="line">timezone: Asia/Beijing #时区</span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://Draculaspider.github.io     #填写你的博客地址</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="comment">#如果要修改主题的话，就修改theme,后续会讲到下载自己喜爱的主题</span></span><br><span class="line">theme: black-blue</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="comment">#Github仓库地址</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/Draculaspider/Draculaspider.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a>添加文章</h3><p>将上面的信息都修改成自己的后，就可以开始写文章了，进入source/_posts，新建一个Markdown文件，<a href="https://www.jianshu.com/p/q81RER" target="_blank" rel="noopener">献给写作者的Markdown新手指南</a>，在安利一波我个人用的，感觉比较好用的Markdown写作软件——Typora(<a href="https://www.typora.io/" target="_blank" rel="noopener">下载链接</a>)</p><p>比如，我新建一个hello.md文件，内容很简单</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat hello-world.md</span><br><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">---</span><br><span class="line"><span class="attribute">hello</span> world</span><br></pre></td></tr></table></figure><p>保存之后，就需要把添加好的博客上传至Github上了</p><h3 id="上传GitHub"><a href="#上传GitHub" class="headerlink" title="上传GitHub"></a>上传GitHub</h3><p>在GitHub_Blog文件下，执行命令(建议每次都按照这个做)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean      #清除缓存和public文件夹下的文件</span><br><span class="line">$ hexo generate   #将.md文件编译为静态页面</span><br><span class="line">$ hexo deploy     #上传所做的更改</span><br></pre></td></tr></table></figure><p>搞定！这时候去浏览器输入你的域名，是不是成功看到了你的博客呢</p><p>风格不适合自己，不喜欢，简单，去更换主题，挑一个自己喜欢的，去Hexo查看<a href="https://hexo.io/themes/" target="_blank" rel="noopener">缤纷多彩的主题</a></p><p>这个Adagio不错，蛮好看的，就他了，点击姓名即可进入主题的github，找到github地址</p> <div align="center"><img src="/2019/09/19/基于Hexo-Github搭建属于自己的博客/thems.png" style="zoom: 80%;"></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Hanlin-Dong/hexo-theme-adagio    #浏览器地址栏复制粘贴</span><br></pre></td></tr></table></figure><p>进入到GitHub_Blog，进入到themes文件夹下，克隆这个主题</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd GitHub_Blog/themes</span><br><span class="line">$ git clone https://github.com/Hanlin-Dong/hexo-theme-adagio.git</span><br></pre></td></tr></table></figure><p>然后回到博客文件夹下，找到并修改主配置文件_config.yml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: hexo-theme-adagio</span><br></pre></td></tr></table></figure><p>保存，然后重新上传至GitHub</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean      </span><br><span class="line">$ hexo generate   </span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>成功！！</p><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><p>1、上传时碰到Warning: Permanently added the RSA host key for IP address ‘<strong><strong>***</strong></strong>‘ ……Permission denied（publickey）的问题。</p><p>首先打开git-bash</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd C:          #进入C盘</span><br><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDDn+qVbCtJ7qvk9D1f8jwuyHUSLLrHSFZjyOhtWWUl+EUMY9lL8T/I0nSCgtCxb0xWZGS6xO4KM8bT3MKFyn1i0q15I8anPNqrOEkzkMyY6WEXSshhRi8za9IT6O/VsJb0zczBHi8jeAnsmZXyA8H4vFmATKJs/zOtTfXYrw/SAElJsBIeO3uUmsBE/19OLaE7KDbxGOyUUFuWzvkLfQCq0396ZkMaw4a/Us1qGirG51q11Nt8ZPp0WTZFqvn87R/7TUByU2FLQCDdoX8ftTAcVZSTdi4z8cT3KjollFEDJvH6PgMyZRcqzVUSUvTv0UI4ozi4/Ciy9eIlPeQ6xBF 82185@DESKTOP-3TQEIVR</span><br></pre></td></tr></table></figure><p>输入第二行后，应该会出现如图所示的一大段字符，如果没有的话，说明没有公钥，我们需要自己创建一个</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br></pre></td></tr></table></figure><p>输入上述代码后，一直回车就行，最后会出现一个矩形框一样的东西，就说明公钥已经生成了，然后继续输入命令cat ~/.ssh/id_rsa.pub，弹出来的一大段即是公钥，右键复制即可</p><p>然后打开浏览器登录进github，还是点击头像旁边的下拉框，点击settings</p> <div align="center"><img src="/2019/09/19/基于Hexo-Github搭建属于自己的博客/key.png" style="zoom:150%;"></div><p>进入后，找到SSH and GPG keys，点击进入，点击New SSH key新建，title自己取名，key中粘贴刚才的公钥，然后保存成功，进入git-bash再次连接就好了</p> <div align="center"><img src="/2019/09/19/基于Hexo-Github搭建属于自己的博客/ssh.png"></div><p>2、上传时报错，提示输入用户名，和邮箱，首先需要为自己配置身份信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name "yourname"               #你的github用户名</span><br><span class="line">$ git config --global user.email "youremail"             #你的github绑定的邮箱</span><br></pre></td></tr></table></figure><p>输入完以上这些后，删除掉根目录下的文件夹：.deploy_git(隐藏文件夹，需用 ls -a 查看)，重新deploy就可以了。</p><p>3、使用命令”npm install -g hexo-cli”安装hexo时出现错误</p><p>在命令行前加上sudo即可</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>4、出现<strong>ERROR Deployer not found: github</strong></p><p>安装hexo-deployer-git</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>在”_config.yml”配置中将deploy 的 type由github改为git后，重新deploy</p><hr><h2 id="转载请注明来源，谢谢合作！！"><a href="#转载请注明来源，谢谢合作！！" class="headerlink" title="转载请注明来源，谢谢合作！！"></a>转载请注明来源，谢谢合作！！</h2></div></excerpt>]]></content>
      
      
      <categories>
          
          <category> Informalessay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
